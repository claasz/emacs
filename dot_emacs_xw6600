(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(cua-mode t nil (cua-base))
 '(js2-basic-offset 2)
 '(scroll-bar-mode (quote right))
 '(show-paren-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))

;; Font
;;(set-default-font "Inconsolata-11")

;;; rhtml mode
;; (add-to-list 'load-path "~/.emacs.d/eschulte-rhtml-ccf0200")
;; (require 'rhtml-mode)

; put rhtml templates into rhtml-mode
;; (setq auto-mode-alist  (cons '("\\.erb$" . rhtml-mode) auto-mode-alist))
;; (setq auto-mode-alist  (cons '("\\.rhtml$" . rhtml-mode) auto-mode-alist))
;; ; put any rjs scripts into ruby-mode, as they are basically ruby
;; (setq auto-mode-alist  (cons '("\\.rjs$" . ruby-mode) auto-mode-alist))

(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))


;; recentf
(require 'recentf)
(recentf-mode 1)
(global-set-key "\C-x\C-r" 'recentf-open-files)


(add-to-list 'load-path "~/.emacs.d")
(require 'haml-mode)
(require 'sass-mode)
(require 'scss-mode)

;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/folder-where-you-put-scss-mode-el"))
(autoload 'scss-mode "scss-mode")
(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))

;; (require 'ruby-test)

(add-hook 'haml-mode-hook
	  '(lambda ()
	     (setq indent-tabs-mode nil)
	     (define-key haml-mode-map "\C-m" 'newline-and-indent)))

;; ruby mode auto indent
(add-hook 'ruby-mode-hook (lambda () (local-set-key "\r" 'newline-and-indent)))


;; PHP
;;(add-to-list 'load-path "~/.emacs.d/elisp")
;;(load "php-mode")
;;(add-to-list 'auto-mode-alist '("\\.inc\\'" . php-mode))
;; (autoload 'php-mode "php-mode" "Major mode for editing php code." t)
;; (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
;; (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))


;; YAML
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;; (autoload 'js2-mode "js2" nil t)
;; (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))


;; Markdown

(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\\.md" . markdown-mode) auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

;; Interactively Do Things (highly recommended, but not strictly required)
;;(require 'ido)
;;(ido-mode t)     
;; Rinari
;;(add-to-list 'load-path "~/.emacs.d/eschulte-rinari-1c3460f/rinari.el")
;;(require 'rinari)

(setq tramp-default-method "ssh")



;; -----------------------------------------------------------------------

;; Shift the selected region right if distance is postive, left if
;; negative

(defun shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun shift-right ()
  (interactive)
  (shift-region 2))

(defun shift-left ()
  (interactive)
  (shift-region -2))

;; Bind (shift-right) and (shift-left) function to your favorite keys. I use
;; the following so that Ctrl-Shift-Right Arrow moves selected text one 
;; column to the right, Ctrl-Shift-Left Arrow moves selected text one
;; column to the left:

(global-set-key [C-S-right] 'shift-right)
(global-set-key [C-S-left] 'shift-left)


;; http://stackoverflow.com/questions/8888989/emacs-css-mode-syntax-table-missing
;;(require 'css-mode)
;;(modify-syntax-entry ?- "w" css-mode-syntax-table)
;;(eval-after-load "css"
;;  '(progn
;;     (modify-syntax-entry ?- "w" css-mode-syntax-table)
;;     ))

(global-set-key [f5] 'rgrep)
(global-set-key [f6] 'comment-or-uncomment-region)
(global-set-key [f7] 'goto-line)

;; RVM
(require 'rvm)
(rvm-use-default) ;; use rvm's default ruby for the current Emacs session

;; org mode
(setq org-todo-keywords
      '((sequence "TODO" "LATER" "UNCLEAR" "|" "DONE")))
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("LATER" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("UNCLEAR" :foreground "orange" :weight bold))))

;; Surround region with "region".t
(fset 'surr-t
   [?\M-x ?n ?a ?r ?r ?o tab ?r tab return ?\M-< ?\" ?\M-> ?\" ?. ?t ?\M-x ?w ?i ?d ?e ?n return])
(global-set-key [f8] 'surr-t)

(fset 'surr-q
   [?\M-x ?n ?a ?r ?r ?o tab ?r tab return ?\M-< ?= right ?\" ?\M-> ?\" ?. ?t ?\M-x ?w ?i ?d ?e ?n return])
(global-set-key [f9] 'surr-q)


;; wrap-region mode
;; To use wrap-region, make sure that this file is in Emacs load-path:
;;(add-to-list 'load-path "/path/to/directory/or/file")
;;
;; Then require wrap-region:
(require 'wrap-region)
(put 'narrow-to-region 'disabled nil)
